const { Client, GatewayIntentBits, SlashCommandBuilder, REST, Routes, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, StringSelectMenuBuilder, Events } = require('discord.js');

const config = {
    token: process.env.TOKEN,
    clientId: process.env.CLIENT_ID
};

const client = new Client({ 
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMessageReactions
    ] 
});

// Sistema de econom√≠a simple
const userCoins = new Map();
const userStats = new Map();

// TRIVIA MEJORADA CON M√ÅS PREGUNTAS
const preguntasTrivia = [
    { 
        pregunta: "¬øEn qu√© a√±o se lanz√≥ Minecraft?", 
        respuesta: "2011", 
        opciones: ["2009", "2011", "2013", "2015"],
        explicacion: "Minecraft fue lanzado oficialmente en 2011 por Mojang"
    },
    { 
        pregunta: "¬øCu√°l es el r√≠o m√°s largo del mundo?", 
        respuesta: "Nilo", 
        opciones: ["Amazonas", "Nilo", "Misisipi", "Yangts√©"],
        explicacion: "El r√≠o Nilo en √Åfrica tiene 6,650 km de longitud"
    },
    { 
        pregunta: "¬øQu√© elemento qu√≠mico tiene el s√≠mbolo 'Au'?", 
        respuesta: "Oro", 
        opciones: ["Plata", "Oro", "Aluminio", "Arg√≥n"],
        explicacion: "Au viene del lat√≠n 'Aurum' que significa oro"
    },
    { 
        pregunta: "¬øEn qu√© continente est√° Egipto?", 
        respuesta: "√Åfrica", 
        opciones: ["√Åfrica", "Asia", "Europa", "Am√©rica"],
        explicacion: "Egipto est√° ubicado en el noreste de √Åfrica"
    },
    { 
        pregunta: "¬øCu√°ntos lados tiene un hex√°gono?", 
        respuesta: "6", 
        opciones: ["5", "6", "7", "8"],
        explicacion: "Hex√°gono viene del griego 'hex' (seis) y 'gonia' (√°ngulo)"
    },
    { 
        pregunta: "¬øQu√© planeta es conocido como 'el planeta rojo'?", 
        respuesta: "Marte", 
        opciones: ["Venus", "Marte", "J√∫piter", "Saturno"],
        explicacion: "Marte aparece rojo por el √≥xido de hierro en su superficie"
    },
    { 
        pregunta: "¬øQui√©n pint√≥ 'La noche estrellada'?", 
        respuesta: "Van Gogh", 
        opciones: ["Picasso", "Van Gogh", "Dal√≠", "Monet"],
        explicacion: "Vincent van Gogh pint√≥ esta obra maestra en 1889"
    },
    { 
        pregunta: "¬øCu√°l es el oc√©ano m√°s grande del mundo?", 
        respuesta: "Pac√≠fico", 
        opciones: ["Atl√°ntico", "√çndico", "Pac√≠fico", "√Årtico"],
        explicacion: "El oc√©ano Pac√≠fico cubre aproximadamente 1/3 de la Tierra"
    },
    { 
        pregunta: "¬øQu√© animal es el m√°s r√°pido del mundo?", 
        respuesta: "Guepardo", 
        opciones: ["Leopardo", "Guepardo", "Le√≥n", "Tigre"],
        explicacion: "El guepardo puede alcanzar 112 km/h en carreras cortas"
    },
    { 
        pregunta: "¬øCu√°l es el hueso m√°s largo del cuerpo humano?", 
        respuesta: "F√©mur", 
        opciones: ["Tibia", "F√©mur", "H√∫mero", "Radio"],
        explicacion: "El f√©mur se encuentra en el muslo y es el hueso m√°s largo y fuerte"
    },
    { 
        pregunta: "¬øEn qu√© a√±o cay√≥ el muro de Berl√≠n?", 
        respuesta: "1989", 
        opciones: ["1987", "1989", "1991", "1993"],
        explicacion: "El muro de Berl√≠n cay√≥ el 9 de noviembre de 1989"
    },
    { 
        pregunta: "¬øQu√© instrumento musical tiene 88 teclas?", 
        respuesta: "Piano", 
        opciones: ["Guitarra", "Viol√≠n", "Piano", "Saxof√≥n"],
        explicacion: "Un piano est√°ndar tiene 52 teclas blancas y 36 negras"
    },
    { 
        pregunta: "¬øCu√°l es el pa√≠s m√°s grande del mundo?", 
        respuesta: "Rusia", 
        opciones: ["Canad√°", "China", "Rusia", "Estados Unidos"],
        explicacion: "Rusia tiene 17.1 millones de km¬≤ de superficie"
    },
    { 
        pregunta: "¬øQu√© gas necesitan las plantas para la fotos√≠ntesis?", 
        respuesta: "CO2", 
        opciones: ["Ox√≠geno", "Nitr√≥geno", "CO2", "Hidr√≥geno"],
        explicacion: "Las plantas absorben CO2 y liberan ox√≠geno durante la fotos√≠ntesis"
    },
    { 
        pregunta: "¬øQui√©n escribi√≥ 'Don Quijote de la Mancha'?", 
        respuesta: "Cervantes", 
        opciones: ["Garc√≠a M√°rquez", "Cervantes", "Shakespeare", "Dostoyevski"],
        explicacion: "Miguel de Cervantes Saavedra escribi√≥ esta obra maestra en 1605"
    }
];

// COMANDOS COMPLETOS - ASEG√öRATE DE QUE EST√âN TODOS
const commands = [
    new SlashCommandBuilder().setName('carrera').setDescription('üé™ Carrera tipo Fall Guys'),
    new SlashCommandBuilder().setName('impostor').setDescription('üïµÔ∏è Juego tipo Among Us'),
    new SlashCommandBuilder().setName('dibuja').setDescription('üé® Dibuja y adivina'),
    new SlashCommandBuilder().setName('party').setDescription('üé™ Selecciona minijuego'),
    new SlashCommandBuilder().setName('trivia').setDescription('üß† Trivia con 15+ preguntas'),
    new SlashCommandBuilder().setName('ruleta').setDescription('üé∞ Ruleta rusa'),
    new SlashCommandBuilder().setName('memoria').setDescription('üß† Juego de memoria'),
    new SlashCommandBuilder().setName('perfil').setDescription('üë§ Ver tu perfil'),
    new SlashCommandBuilder().setName('leaderboard').setDescription('üèÜ Tabla de clasificaci√≥n'),
    new SlashCommandBuilder().setName('slot').setDescription('üé∞ M√°quina tragamonedas'),
    new SlashCommandBuilder().setName('solo').setDescription('üéÆ Juegos para un solo jugador'),
    new SlashCommandBuilder().setName('version').setDescription('‚ÑπÔ∏è Ver informaci√≥n del bot')
].map(command => command.toJSON());

// REGISTRAR COMANDOS - ESTO ES CLAVE
const rest = new REST({ version: '10' }).setToken(config.token);

async function registerCommands() {
    try {
        console.log('üîÑ Registrando comandos slash...');
        const data = await rest.put(
            Routes.applicationCommands(config.clientId),
            { body: commands }
        );
        console.log(`‚úÖ ${data.length} comandos registrados correctamente!`);
        console.log('üìù Comandos disponibles:', commands.map(c => c.name).join(', '));
    } catch (error) {
        console.error('‚ùå Error registrando comandos:', error);
    }
}

// Ejecutar el registro de comandos
registerCommands();

// Funci√≥n para obtener coins
function getCoins(userId) {
    if (!userCoins.has(userId)) {
        userCoins.set(userId, 1000);
        userStats.set(userId, { wins: 0, games: 0, coinsWon: 0 });
    }
    return userCoins.get(userId);
}

client.on(Events.ClientReady, () => {
    console.log(`üéÆ ${client.user.tag} listo con trivia mejorada!`);
    console.log(`üìä ${preguntasTrivia.length} preguntas en trivia`);
});

client.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isChatInputCommand()) return;

    const { commandName, user } = interaction;

    // COMANDO TRIVIA MEJORADO
    if (commandName === 'trivia') {
        const pregunta = preguntasTrivia[Math.floor(Math.random() * preguntasTrivia.length)];
        
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder().setCustomId('a').setLabel(pregunta.opciones[0]).setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('b').setLabel(pregunta.opciones[1]).setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('c').setLabel(pregunta.opciones[2]).setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('d').setLabel(pregunta.opciones[3]).setStyle(ButtonStyle.Primary)
            );

        const embed = new EmbedBuilder()
            .setTitle('üß† TRIVIA MEJORADA')
            .setDescription(`**${pregunta.pregunta}**\n\nTienes 20 segundos para responder!`)
            .setColor(0x3498DB)
            .setFooter({ text: `Pregunta ${preguntasTrivia.indexOf(pregunta) + 1} de ${preguntasTrivia.length} | ¬°Respuestas verificadas! ‚úÖ` });

        await interaction.reply({ embeds: [embed], components: [row] });

        const filter = i => i.isButton() && i.user.id === interaction.user.id;
        const collector = interaction.channel.createMessageComponentCollector({ filter, time: 20000 });

        collector.on('collect', async i => {
            const selectedIndex = ['a', 'b', 'c', 'd'].indexOf(i.customId);
            const selectedAnswer = pregunta.opciones[selectedIndex];
            
            if (selectedAnswer === pregunta.respuesta) {
                const coins = getCoins(user.id);
                userCoins.set(user.id, coins + 50);
                
                const winEmbed = new EmbedBuilder()
                    .setTitle('üéâ ¬°CORRECTO!')
                    .setDescription(`**${pregunta.respuesta}** ‚úÖ\n\n*${pregunta.explicacion}*`)
                    .setColor(0x00FF00)
                    .addFields(
                        { name: 'üí∞ Premio', value: '+50 ü™ô', inline: true },
                        { name: 'üí≥ Saldo Actual', value: `${getCoins(user.id)} ü™ô`, inline: true }
                    );
                
                await i.reply({ embeds: [winEmbed] });
                collector.stop();
            } else {
                await i.reply({ 
                    content: `‚ùå Incorrecto! La respuesta era: **${pregunta.respuesta}**\n*${pregunta.explicacion}*`, 
                    ephemeral: true 
                });
                collector.stop();
            }
        });

        collector.on('end', async (collected, reason) => {
            if (reason === 'time') {
                await interaction.followUp({ 
                    content: `‚è∞ **TIEMPO AGOTADO!** La respuesta era: **${pregunta.respuesta}**\n*${pregunta.explicacion}*` 
                });
            }
        });
    }

    // COMANDO VERSION
    else if (commandName === 'version') {
        const embed = new EmbedBuilder()
            .setTitle('‚ÑπÔ∏è INFORMACI√ìN DEL BOT')
            .setColor(0x00FF00)
            .addFields(
                { name: 'üîÑ Versi√≥n', value: '**2.1.0**', inline: true },
                { name: 'üìÖ Actualizado', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true },
                { name: '‚úÖ Estado', value: '**En funcionamiento**', inline: true },
                { name: 'üß† Preguntas Trivia', value: `**${preguntasTrivia.length}** disponibles`, inline: true }
            )
            .setFooter({ text: '¬°Trivia mejorada con m√°s preguntas!' });

        await interaction.reply({ embeds: [embed] });
    }

    // COMANDO PERFIL
    else if (commandName === 'perfil') {
        const coins = getCoins(user.id);
        const stats = userStats.get(user.id) || { wins: 0, games: 0, coinsWon: 0 };
        const winRate = stats.games > 0 ? ((stats.wins / stats.games) * 100).toFixed(1) : 0;

        const embed = new EmbedBuilder()
            .setTitle(`üë§ PERFIL - ${user.username}`)
            .setThumbnail(user.displayAvatarURL())
            .setColor(0x3498DB)
            .addFields(
                { name: 'ü™ô Monedas', value: `**${coins}**`, inline: true },
                { name: 'üèÜ Victorias', value: `**${stats.wins}**`, inline: true },
                { name: 'üìä Win Rate', value: `**${winRate}%**`, inline: true },
                { name: 'üéÆ Partidas', value: `**${stats.games}** jugadas`, inline: true },
                { name: 'üí∞ Ganado Total', value: `**${stats.coinsWon}** ü™ô`, inline: true }
            )
            .setFooter({ text: '¬°Juega trivia para ganar m√°s monedas!' });

        await interaction.reply({ embeds: [embed] });
    }

    // COMANDO SOLO
    else if (commandName === 'solo') {
        const gamesMenu = new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('solo_game_select')
                .setPlaceholder('üéÆ Elige un juego individual')
                .addOptions([
                    { label: 'Adivina el N√∫mero', description: 'üéØ Cl√°sico juego de adivinanza', value: 'adivina', emoji: 'üî¢' },
                    { label: 'Piedra Papel Tijera', description: '‚úÇÔ∏è Contra la m√°quina', value: 'ppt', emoji: 'ü™®' },
                    { label: 'Trivia Individual', description: 'üß† Practica sin presi√≥n', value: 'trivia_solo', emoji: 'üìö' }
                ])
        );

        const embed = new EmbedBuilder()
            .setTitle('üéÆ MODO SOLO')
            .setDescription('**Juega a tu ritmo!**\nSelecciona un juego:')
            .setColor(0x7289DA)
            .addFields(
                { name: 'üë§ Jugador', value: `${user.username}`, inline: true },
                { name: 'üí∞ Recompensas', value: 'Hasta **100** ü™ô', inline: true }
            );

        await interaction.reply({ embeds: [embed], components: [gamesMenu] });
    }

    // COMANDOS B√ÅSICOS (para que no den error)
    else if (commandName === 'carrera') {
        await interaction.reply('üé™ **Carrera** - ¬°Juego en desarrollo! Pr√≥ximamente...');
    }
    else if (commandName === 'impostor') {
        await interaction.reply('üïµÔ∏è **Impostor** - ¬°Juego en desarrollo! Pr√≥ximamente...');
    }
    else if (commandName === 'dibuja') {
        await interaction.reply('üé® **Dibuja** - ¬°Juego en desarrollo! Pr√≥ximamente...');
    }
    else if (commandName === 'party') {
        await interaction.reply('üé™ **Party** - ¬°Juego en desarrollo! Pr√≥ximamente...');
    }
    else if (commandName === 'ruleta') {
        await interaction.reply('üé∞ **Ruleta** - ¬°Juego en desarrollo! Pr√≥ximamente...');
    }
    else if (commandName === 'memoria') {
        await interaction.reply('üß† **Memoria** - ¬°Juego en desarrollo! Pr√≥ximamente...');
    }
    else if (commandName === 'leaderboard') {
        await interaction.reply('üèÜ **Leaderboard** - ¬°En desarrollo! Pr√≥ximamente...');
    }
    else if (commandName === 'slot') {
        await interaction.reply('üé∞ **Slot** - ¬°Juego en desarrollo! Pr√≥ximamente...');
    }
});

// Manejar juegos en solitario
client.on(Events.InteractionCreate, async interaction => {
    if (interaction.isStringSelectMenu() && interaction.customId === 'solo_game_select') {
        const game = interaction.values[0];
        
        if (game === 'trivia_solo') {
            const pregunta = preguntasTrivia[Math.floor(Math.random() * preguntasTrivia.length)];
            
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder().setCustomId('a').setLabel(pregunta.opciones[0]).setStyle(ButtonStyle.Primary),
                    new ButtonBuilder().setCustomId('b').setLabel(pregunta.opciones[1]).setStyle(ButtonStyle.Primary),
                    new ButtonBuilder().setCustomId('c').setLabel(pregunta.opciones[2]).setStyle(ButtonStyle.Primary),
                    new ButtonBuilder().setCustomId('d').setLabel(pregunta.opciones[3]).setStyle(ButtonStyle.Primary)
                );

            const embed = new EmbedBuilder()
                .setTitle('üß† TRIVIA INDIVIDUAL')
                .setDescription(`**${pregunta.pregunta}**\n\nT√≥mate tu tiempo para responder!`)
                .setColor(0x9B59B6)
                .setFooter({ text: 'Modo pr√°ctica - Sin l√≠mite de tiempo' });

            await interaction.reply({ embeds: [embed], components: [row] });
        }
    }

    // Manejar respuestas de trivia individual
    if (interaction.isButton() && ['a', 'b', 'c', 'd'].includes(interaction.customId)) {
        // L√≥gica para manejar respuestas...
        await interaction.reply({ content: '‚úÖ Respuesta procesada!', ephemeral: true });
    }
});

client.login(config.token);