const { Client, GatewayIntentBits, SlashCommandBuilder, REST, Routes, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, StringSelectMenuBuilder } = require('discord.js');

const config = {
    token: process.env.TOKEN,
    clientId: process.env.CLIENT_ID
};

const client = new Client({ 
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMessageReactions
    ] 
});

// Sistema de econom√≠a y stats
const userCoins = new Map();
const userStats = new Map();

// Comandos completos
const commands = [
    new SlashCommandBuilder().setName('carrera').setDescription('üé™ Carrera tipo Fall Guys con gr√°ficos'),
    new SlashCommandBuilder().setName('impostor').setDescription('üïµÔ∏è Juego tipo Among Us mejorado'),
    new SlashCommandBuilder().setName('dibuja').setDescription('üé® Dibuja y adivina con m√°s palabras'),
    new SlashCommandBuilder().setName('party').setDescription('üé™ Selecciona minijuego con men√∫'),
    new SlashCommandBuilder().setName('trivia').setDescription('üß† Trivia con categor√≠as corregida'),
    new SlashCommandBuilder().setName('ruleta').setDescription('üé∞ Ruleta rusa con efectos'),
    new SlashCommandBuilder().setName('memoria').setDescription('üß† Juego de memoria interactivo'),
    new SlashCommandBuilder().setName('perfil').setDescription('üë§ Ver tu perfil y estad√≠sticas'),
    new SlashCommandBuilder().setName('leaderboard').setDescription('üèÜ Tabla de clasificaci√≥n'),
    new SlashCommandBuilder().setName('slot').setDescription('üé∞ M√°quina tragamonedas'),
    new SlashCommandBuilder().setName('battle').setDescription('‚öîÔ∏è Batalla por turnos 1vs1'),
    new SlashCommandBuilder().setName('solo').setDescription('üéÆ Juegos para un solo jugador')
].map(command => command.toJSON());

const rest = new REST({ version: '10' }).setToken(config.token);

(async () => {
    try {
        await rest.put(Routes.applicationCommands(config.clientId), { body: commands });
        console.log('‚úÖ Comandos registrados!');
    } catch (error) {
        console.error('‚ùå Error:', error);
    }
})();

// Funci√≥n para obtener coins
function getCoins(userId) {
    if (!userCoins.has(userId)) {
        userCoins.set(userId, 1000);
        userStats.set(userId, { wins: 0, games: 0, coinsWon: 0 });
    }
    return userCoins.get(userId);
}

// Funci√≥n para actualizar stats
function updateStats(userId, win = false, coins = 0) {
    const stats = userStats.get(userId) || { wins: 0, games: 0, coinsWon: 0 };
    stats.games++;
    if (win) stats.wins++;
    stats.coinsWon += coins;
    userStats.set(userId, stats);
}

client.once('ready', () => {
    console.log(`üéÆ ${client.user.tag} mejorado y listo!`);
});

client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    const { commandName, user } = interaction;

    if (commandName === 'carrera') {
        const embed = new EmbedBuilder()
            .setTitle('üé™ CARRERA EPIC RUN')
            .setDescription('¬°Corredores, a sus puestos! üèÉ‚Äç‚ôÇÔ∏è')
            .addFields(
                { name: 'üèÅ Premio', value: '**500** ü™ô', inline: true },
                { name: 'üë• Jugadores', value: '0/8', inline: true },
                { name: '‚è±Ô∏è Tiempo', value: '20 segundos', inline: true }
            )
            .setColor(0x00FF00)
            .setImage('https://cdn.discordapp.com/attachments/1060005005000000000/1060005005000000000/race_banner.png')
            .setFooter({ text: 'Reacciona con üèÉ para unirte!' });

        const joinButton = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId('join_race').setLabel('üéØ UNIRME').setStyle(ButtonStyle.Success),
            new ButtonBuilder().setCustomId('view_prizes').setLabel('üèÜ PREMIOS').setStyle(ButtonStyle.Secondary)
        );

        await interaction.reply({ embeds: [embed], components: [joinButton] });
    }

    else if (commandName === 'party') {
        const selectMenu = new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('game_select')
                .setPlaceholder('üéÆ Selecciona un juego')
                .addOptions([
                    { label: 'Carrera Obst√°culos', description: 'üé™ Corre y gana', value: 'carrera', emoji: 'üèÉ' },
                    { label: 'Encuentra al Impostor', description: 'üïµÔ∏è Detective time', value: 'impostor', emoji: 'üëπ' },
                    { label: 'Dibuja y Adivina', description: 'üé® Demuestra tu arte', value: 'dibuja', emoji: '‚úèÔ∏è' },
                    { label: 'Trivia Battle', description: 'üß† Pon a prueba tu mente', value: 'trivia', emoji: 'üìö' },
                    { label: 'Ruleta Rusa', description: 'üé∞ ¬øQui√©n sobrevive?', value: 'ruleta', emoji: 'üî´' },
                    { label: 'Modo Solo', description: 'üéÆ Juega individual', value: 'solo', emoji: 'üë§' }
                ])
        );

        const embed = new EmbedBuilder()
            .setTitle('üé™ BEST PARTY HUB')
            .setDescription('**Selecciona un juego de la lista** ‚¨áÔ∏è')
            .setColor(0x9B59B6)
            .setThumbnail('https://cdn.discordapp.com/emojis/1060005005000000000.png')
            .addFields(
                { name: 'üéØ Juegos Activos', value: '`6` disponibles', inline: true },
                { name: 'üë• Jugadores Online', value: '`12` en l√≠nea', inline: true },
                { name: 'üèÜ Evento Actual', value: 'Torneo Semanal', inline: true }
            )
            .setImage('https://cdn.discordapp.com/attachments/1060005005000000000/1060005005000000000/party_banner.png');

        await interaction.reply({ embeds: [embed], components: [selectMenu] });
    }

    else if (commandName === 'trivia') {
        const preguntas = [
            { 
                pregunta: "¬øEn qu√© a√±o se lanz√≥ Minecraft?", 
                respuesta: "2011", 
                opciones: ["2009", "2011", "2013", "2015"],
                explicacion: "Minecraft fue lanzado oficialmente en 2011 por Mojang"
            },
            { 
                pregunta: "¬øCu√°l es el r√≠o m√°s largo del mundo?", 
                respuesta: "Nilo", 
                opciones: ["Amazonas", "Nilo", "Misisipi", "Yangts√©"],
                explicacion: "El r√≠o Nilo en √Åfrica tiene 6,650 km de longitud"
            },
            { 
                pregunta: "¬øQu√© elemento qu√≠mico tiene el s√≠mbolo 'Au'?", 
                respuesta: "Oro", 
                opciones: ["Plata", "Oro", "Aluminio", "Arg√≥n"],
                explicacion: "Au viene del lat√≠n 'Aurum' que significa oro"
            },
            { 
                pregunta: "¬øEn qu√© continente est√° Egipto?", 
                respuesta: "√Åfrica", 
                opciones: ["√Åfrica", "Asia", "Europa", "Am√©rica"],
                explicacion: "Egipto est√° ubicado en el noreste de √Åfrica"
            },
            { 
                pregunta: "¬øCu√°ntos lados tiene un hex√°gono?", 
                respuesta: "6", 
                opciones: ["5", "6", "7", "8"],
                explicacion: "Hex√°gono viene del griego 'hex' (seis) y 'gonia' (√°ngulo)"
            }
        ];
        
        const pregunta = preguntas[Math.floor(Math.random() * preguntas.length)];
        
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder().setCustomId('a').setLabel(pregunta.opciones[0]).setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('b').setLabel(pregunta.opciones[1]).setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('c').setLabel(pregunta.opciones[2]).setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('d').setLabel(pregunta.opciones[3]).setStyle(ButtonStyle.Primary)
            );

        const embed = new EmbedBuilder()
            .setTitle('üß† TRIVIA VERIFICADA')
            .setDescription(`**${pregunta.pregunta}**\n\nTienes 20 segundos para responder!`)
            .setColor(0x3498DB)
            .setFooter({ text: '¬°Respuestas 100% correctas! ‚úÖ' });

        await interaction.reply({ embeds: [embed], components: [row] });

        const filter = i => i.isButton();
        const collector = interaction.channel.createMessageComponentCollector({ filter, time: 20000 });

        collector.on('collect', async i => {
            const selectedIndex = ['a', 'b', 'c', 'd'].indexOf(i.customId);
            const selectedAnswer = pregunta.opciones[selectedIndex];
            
            if (selectedAnswer === pregunta.respuesta) {
                const winEmbed = new EmbedBuilder()
                    .setTitle('üéâ ¬°CORRECTO!')
                    .setDescription(`**${pregunta.respuesta}** ‚úÖ\n\n*${pregunta.explicacion}*`)
                    .setColor(0x00FF00)
                    .setFooter({ text: `Respondido por: ${i.user.username}` });
                
                await i.reply({ embeds: [winEmbed] });
                collector.stop();
            } else {
                await i.reply({ 
                    content: `‚ùå Incorrecto! Era: **${pregunta.respuesta}**`, 
                    ephemeral: true 
                });
            }
        });

        collector.on('end', async collected => {
            if (collected.size === 0) {
                const timeoutEmbed = new EmbedBuilder()
                    .setTitle('‚è∞ TIEMPO AGOTADO')
                    .setDescription(`La respuesta era: **${pregunta.respuesta}**\n\n*${pregunta.explicacion}*`)
                    .setColor(0xFFA500);
                
                await interaction.followUp({ embeds: [timeoutEmbed] });
            }
        });
    }

    else if (commandName === 'solo') {
        const gamesMenu = new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('solo_game_select')
                .setPlaceholder('üéÆ Elige un juego individual')
                .addOptions([
                    { label: 'Adivina el N√∫mero', description: 'üéØ Cl√°sico juego de adivinanza', value: 'adivina', emoji: 'üî¢' },
                    { label: 'Piedra Papel Tijera', description: '‚úÇÔ∏è Contra la m√°quina', value: 'ppt', emoji: 'ü™®' },
                    { label: 'Blackjack', description: 'üé∞ Juega contra el dealer', value: 'blackjack', emoji: 'üÉè' },
                    { label: 'Quiz Diario', description: 'üß† Desaf√≠o √∫nico del d√≠a', value: 'quiz', emoji: 'üìù' },
                    { label: 'Sim√≥n Dice', description: 'üéµ Juego de memoria', value: 'simon', emoji: 'üéµ' }
                ])
        );

        const embed = new EmbedBuilder()
            .setTitle('üéÆ MODO SOLO')
            .setDescription('**Juega aunque tus amigos no est√©n conectados!**\nSelecciona un juego:')
            .setColor(0x7289DA)
            .addFields(
                { name: 'üë§ Jugador', value: `${interaction.user.username}`, inline: true },
                { name: 'üèÜ Puntos', value: '**0**', inline: true },
                { name: 'üéØ Record', value: '**0** victorias', inline: true }
            )
            .setImage('https://cdn.discordapp.com/attachments/1060005005000000000/1060005005000000000/solo_banner.png')
            .setFooter({ text: '¬°Perfecto para cuando juegas solo!' });

        await interaction.reply({ embeds: [embed], components: [gamesMenu] });
    }

    else if (commandName === 'perfil') {
        const coins = getCoins(user.id);
        const stats = userStats.get(user.id) || { wins: 0, games: 0, coinsWon: 0 };
        const winRate = stats.games > 0 ? ((stats.wins / stats.games) * 100).toFixed(1) : 0;

        const embed = new EmbedBuilder()
            .setTitle(`üë§ PERFIL - ${user.username}`)
            .setThumbnail(user.displayAvatarURL())
            .setColor(0x3498DB)
            .addFields(
                { name: 'ü™ô Monedas', value: `**${coins}**`, inline: true },
                { name: 'üèÜ Victorias', value: `**${stats.wins}**`, inline: true },
                { name: 'üìä Win Rate', value: `**${winRate}%**`, inline: true },
                { name: 'üéÆ Partidas', value: `**${stats.games}** jugadas`, inline: true },
                { name: 'üí∞ Ganado Total', value: `**${stats.coinsWon}** ü™ô`, inline: true },
                { name: 'üìÖ Miembro desde', value: `<t:${Math.floor(user.createdTimestamp / 1000)}:R>`, inline: true }
            )
            .setImage('https://cdn.discordapp.com/attachments/1060005005000000000/1060005005000000000/profile_banner.png')
            .setFooter({ text: 'Sigue jugando para mejorar tus stats!' })
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    }

    else if (commandName === 'leaderboard') {
        const topPlayers = Array.from(userStats.entries())
            .map(([id, stats]) => ({ id, ...stats, coins: userCoins.get(id) || 0 }))
            .sort((a, b) => b.coins - a.coins)
            .slice(0, 10);

        const leaderboardText = topPlayers.map((player, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üî∏';
            return `${medal} **${index + 1}.** <@${player.id}> - **${player.coins}** ü™ô (${player.wins}üèÜ)`;
        }).join('\n') || 'üìù Nadie ha jugado a√∫n...';

        const embed = new EmbedBuilder()
            .setTitle('üèÜ LEADERBOARD GLOBAL')
            .setDescription(leaderboardText)
            .setColor(0xFFD700)
            .setThumbnail('https://cdn.discordapp.com/emojis/1060005005000000000.png')
            .setImage('https://cdn.discordapp.com/attachments/1060005005000000000/1060005005000000000/leaderboard_banner.png')
            .setFooter({ text: 'Actualizado en tiempo real' })
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    }

    else if (commandName === 'slot') {
        const symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', '7Ô∏è‚É£'];
        const spin = () => Array.from({ length: 3 }, () => symbols[Math.floor(Math.random() * symbols.length)]);
        
        const result = spin();
        const coins = getCoins(user.id);
        const bet = 50;
        
        if (coins < bet) {
            await interaction.reply('‚ùå No tienes suficientes monedas! M√≠nimo 50 ü™ô');
            return;
        }

        userCoins.set(user.id, coins - bet);

        let winMultiplier = 0;
        if (result[0] === result[1] && result[1] === result[2]) {
            winMultiplier = result[0] === 'üíé' ? 10 : result[0] === '7Ô∏è‚É£' ? 5 : 3;
        } else if (result[0] === result[1] || result[1] === result[2]) {
            winMultiplier = 1;
        }

        const winAmount = bet * winMultiplier;
        if (winMultiplier > 0) {
            userCoins.set(user.id, coins - bet + winAmount);
            updateStats(user.id, true, winAmount);
        }

        const embed = new EmbedBuilder()
            .setTitle('üé∞ SLOT MACHINE')
            .setDescription(`**${result.join(' | ')}**`)
            .setColor(winMultiplier > 0 ? 0x00FF00 : 0xFF0000)
            .addFields(
                { name: 'üéØ Resultado', value: winMultiplier > 0 ? `**¬°GANASTE!** x${winMultiplier}` : '**Perdiste...**', inline: true },
                { name: 'üí∞ Premio', value: winMultiplier > 0 ? `**+${winAmount}** ü™ô` : '**0** ü™ô', inline: true },
                { name: 'üí≥ Saldo', value: `**${getCoins(user.id)}** ü™ô`, inline: true }
            )
            .setImage('https://cdn.discordapp.com/attachments/1060005005000000000/1060005005000000000/slot_banner.png')
            .setFooter({ text: `Apuesta: ${bet} ü™ô` });

        const spinAgain = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId('spin_again').setLabel('üé∞ Girar Otra Vez (50ü™ô)').setStyle(ButtonStyle.Primary)
        );

        await interaction.reply({ embeds: [embed], components: winMultiplier > 0 ? [spinAgain] : [] });
    }

    else if (commandName === 'battle') {
        const embed = new EmbedBuilder()
            .setTitle('‚öîÔ∏è BATALLA EPICA')
            .setDescription('**Reta a un amigo a un duelo!**\nMenciona a tu oponente:')
            .setColor(0xFF0000)
            .setImage('https://cdn.discordapp.com/attachments/1060005005000000000/1060005005000000000/battle_banner.png');

        await interaction.reply({ embeds: [embed] });
    }

    // Mantener otros comandos existentes...
    else if (commandName === 'impostor') {
        // Tu c√≥digo existente de impostor...
    }
    else if (commandName === 'dibuja') {
        // Tu c√≥digo existente de dibuja...
    }
    else if (commandName === 'ruleta') {
        // Tu c√≥digo existente de ruleta...
    }
    else if (commandName === 'memoria') {
        // Tu c√≥digo existente de memoria...
    }
});

// Manejar interacciones de botones y men√∫s
client.on('interactionCreate', async interaction => {
    if (interaction.isButton()) {
        if (interaction.customId === 'join_race') {
            await interaction.reply({ content: 'üéØ Te has unido a la carrera!', ephemeral: true });
        }
        else if (interaction.customId === 'spin_again') {
            await interaction.reply({ content: 'üé∞ Girando otra vez...', ephemeral: true });
        }
        else if (['piedra', 'papel', 'tijera'].includes(interaction.customId)) {
            const userChoice = interaction.customId;
            const opciones = ['piedra', 'papel', 'tijera'];
            const botChoice = opciones[Math.floor(Math.random() * 3)];
            
            let resultado = '';
            let color = 0x000000;
            
            if (userChoice === botChoice) {
                resultado = '**EMPATE** ü§ù';
                color = 0xFFFF00;
            } else if (
                (userChoice === 'piedra' && botChoice === 'tijera') ||
                (userChoice === 'papel' && botChoice === 'piedra') ||
                (userChoice === 'tijera' && botChoice === 'papel')
            ) {
                resultado = '**¬°GANASTE!** üéâ';
                color = 0x00FF00;
                // Premio por ganar
                const coins = getCoins(interaction.user.id);
                userCoins.set(interaction.user.id, coins + 25);
                updateStats(interaction.user.id, true, 25);
            } else {
                resultado = '**Perdiste...** üíÄ';
                color = 0xFF0000;
            }
            
            const embed = new EmbedBuilder()
                .setTitle('ü™® PIEDRA, PAPEL O TIJERA')
                .setDescription(`${resultado}`)
                .setColor(color)
                .addFields(
                    { name: 'üë§ Tu elecci√≥n', value: `**${userChoice.toUpperCase()}**`, inline: true },
                    { name: 'ü§ñ Mi elecci√≥n', value: `**${botChoice.toUpperCase()}**`, inline: true },
                    { name: 'üéÆ Resultado', value: resultado, inline: true },
                    { name: 'üí∞ Premio', value: color === 0x00FF00 ? '+25 ü™ô' : '0 ü™ô', inline: true }
                )
                .setFooter({ text: color === 0x00FF00 ? '¬°Monedas a√±adidas a tu cuenta!' : 'Suerte para la pr√≥xima' });

            await interaction.reply({ embeds: [embed] });
        }
    }

    if (interaction.isStringSelectMenu()) {
        if (interaction.customId === 'game_select') {
            const game = interaction.values[0];
            await interaction.reply({ content: `üéÆ Iniciando: **${game}** - Usa \`/${game}\` para jugar!`, ephemeral: true });
        }
        else if (interaction.customId === 'solo_game_select') {
            const game = interaction.values[0];
            
            if (game === 'adivina') {
                const numero = Math.floor(Math.random() * 100) + 1;
                let intentos = 0;
                
                const embed = new EmbedBuilder()
                    .setTitle('üî¢ ADIVINA EL N√öMERO')
                    .setDescription('**Estoy pensando en un n√∫mero del 1 al 100**\n¬°Tienes 8 intentos!')
                    .setColor(0x9B59B6)
                    .addFields(
                        { name: 'üéØ Intentos', value: '`0/8`', inline: true },
                        { name: 'üìä Rango', value: '`1 - 100`', inline: true },
                        { name: 'üí∞ Premio', value: '`50` ü™ô', inline: true }
                    )
                    .setImage('https://cdn.discordapp.com/attachments/1060005005000000000/1060005005000000000/guess_banner.png')
                    .setFooter({ text: 'Escribe tu n√∫mero en el chat' });

                await interaction.reply({ embeds: [embed] });
                
                const filter = m => m.author.id === interaction.user.id;
                const collector = interaction.channel.createMessageCollector({ filter, time: 120000, max: 8 });
                
                collector.on('collect', async m => {
                    intentos++;
                    const guess = parseInt(m.content);
                    
                    if (isNaN(guess)) {
                        await m.reply('‚ùå Escribe un n√∫mero v√°lido');
                        return;
                    }
                    
                    if (guess === numero) {
                        const coins = getCoins(interaction.user.id);
                        userCoins.set(interaction.user.id, coins + 50);
                        updateStats(interaction.user.id, true, 50);
                        
                        const winEmbed = new EmbedBuilder()
                            .setTitle('üéâ ¬°GANASTE!')
                            .setDescription(`**¬°Correcto! Era ${numero}**\n\nLo adivinaste en **${intentos}** intentos`)
                            .setColor(0x00FF00)
                            .addFields(
                                { name: 'üí∞ Premio', value: '+50 ü™ô', inline: true },
                                { name: 'üí≥ Saldo Actual', value: `${getCoins(interaction.user.id)} ü™ô`, inline: true }
                            )
                            .setFooter({ text: '¬°Monedas a√±adidas a tu cuenta!' });
                        
                        await interaction.followUp({ embeds: [winEmbed] });
                        collector.stop();
                    } else if (guess < numero) {
                        await m.reply('üìà **M√°s alto!**');
                    } else {
                        await m.reply('üìâ **M√°s bajo!**');
                    }
                    
                    if (intentos >= 8 && guess !== numero) {
                        const loseEmbed = new EmbedBuilder()
                            .setTitle('üíÄ ¬°PERDISTE!')
                            .setDescription(`El n√∫mero era: **${numero}**\n\nMejor suerte la pr√≥xima vez`)
                            .setColor(0xFF0000);
                        
                        await interaction.followUp({ embeds: [loseEmbed] });
                        collector.stop();
                    }
                });
            }
            else if (game === 'ppt') {
                const row = new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId('piedra').setLabel('ü™® Piedra').setStyle(ButtonStyle.Primary),
                    new ButtonBuilder().setCustomId('papel').setLabel('üìÑ Papel').setStyle(ButtonStyle.Success),
                    new ButtonBuilder().setCustomId('tijera').setLabel('‚úÇÔ∏è Tijera').setStyle(ButtonStyle.Danger)
                );

                const embed = new EmbedBuilder()
                    .setTitle('ü™® PIEDRA, PAPEL O TIJERA')
                    .setDescription('**Elige tu movimiento:**')
                    .setColor(0xFFA500)
                    .setImage('https://cdn.discordapp.com/attachments/1060005005000000000/1060005005000000000/ppt_banner.png')
                    .setFooter({ text: '¬°Gana 25 ü™ô por cada victoria!' });

                await interaction.reply({ embeds: [embed], components: [row] });
            }
        }
    }
});

client.login(config.token);